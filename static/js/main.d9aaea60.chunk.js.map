{"version":3,"sources":["Components/SearchBox/SearchBox.js","Components/CardLists/Card/Card.js","Components/CardLists/CardPopup/CardPopup.js","Components/Common/Dropdown/Dropdown.js","Components/CardLists/CardList/CardList.js","Components/Common/Loader/Loader.js","Components/Empty/Empty.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","props","handleChange","event","setState","value","target","handleSubmit","preventDefault","state","setCurrentUserList","className","onSubmit","e","autoComplete","type","name","this","placeholder","onChange","src","alt","onClick","Component","Card","user","avatar_url","login","score","id","handleUserDetail","CardPopup","currentUser","public_repos","following","followers","created_at","site_admin","html_url","href","handlePopup","Dropdown","handleDropDown","showDropdown","getCurrentSort","sortItems","listItems","find","a","currentSortId","handleSort","sortHandler","openListItem","map","l","key","CardList","fetchUserDetails","userName","userDetail","getCurrentUserDetails","fetch","response","json","data","prevState","userDetails","val","showPopup","currentUserName","userList","u","length","nextProps","Loader","Empty","Main","fetchAllUsers","showLoader","showEmpty","items","JSON","parse","stringify","sort","b","title","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d9aaea60.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./SearchBox.scss\";\nclass SearchBox extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: \"\",\n    };\n  }\n\n  handleChange = (event) => {\n    this.setState({ value: event.target.value });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    if (!this.state.value) return;\n    this.props.setCurrentUserList(this.state.value);\n    this.setState({ value: ''});\n  };\n\n  render() {\n    return (\n      <div className=\"gca-search_wrapper\">\n        <form\n          onSubmit={(e) => this.handleSubmit(e)}\n          className=\"gca-search_form\"\n          autoComplete=\"off\"\n        >\n          <div className=\"gca-search_form_label\">\n            <input\n              className=\"gca-search_form_input\"\n              type=\"text\"\n              name=\"name\"\n              target=\"_blank\"\n              value={this.state.value}\n              placeholder=\"Enter User Name...\"\n              onChange={(e) => this.handleChange(e)}\n            />\n            <img\n              src=\"/images/icons8-search.svg\"\n              className=\"gca-search_form_img_btn\"\n              alt=\"img\"\n              onClick={(e) => this.handleSubmit(e)}\n            />\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default SearchBox;\n","import React, { Component } from 'react';\nimport './Card.scss'\n\n class Card extends Component {\n\n    render() {\n        let {avatar_url,login,score,id} = this.props.user;\n        return (\n            <div className=\"gca-card\" onClick={()=>this.props.handleUserDetail(this.props.user.login,true)}> \n                <div className='gca-card_name'>name: {login}</div>\n                <div className ='as'> {id} </div>\n                <div className=\"gca-card_avatar\"><img className=\"gca-card_avatar_img\" src={avatar_url} alt='img'/></div>\n                <div className=\"gca-card_score\">score: {score}</div>\n            </div>\n        )\n    }\n}\n\nexport default Card\n","import React, { Component } from \"react\";\nimport \"./CardPopup.scss\";\n\nclass CardPopup extends Component {\n  // randGenerateGradiantColor = (a = '#') => {\n  //         for(color in 2){\n  //             let x = Math.round( Math.random() * 1167772154 );\n  //             color.push\n  //         }\n\n  //         let angle = Math.round( Math.random() * 360 );\n  //       return a;\n  // }\n\n  componentDidMount() {\n    // this.randGenerateGradiantColor()\n  }\n\n  render() {\n    const {\n      public_repos,\n      following,\n      followers,\n      created_at,\n      site_admin,\n      html_url,\n      name,\n      login,\n      avatar_url,\n    } = this.props.currentUser;\n    return (\n      <div>\n        <div className=\"gca-overlay\"></div>\n        <div className=\"gca-popup\">\n          <div className=\"gca-popup_img\"></div>\n           {site_admin ? '': <div className=\"gca-popup_admin\">ADMIN</div>}\n          <div className=\"gca-popup_cont_wrap\">\n            <div className=\"gca-popup_cont_wrap_tr\">\n            <div className=\"gca-popup_cont\">\n              <img className=\"gca-popup_cont_img\" src={avatar_url} alt=\"img\" />\n              <div className=\"gca-popup_cont_name\"> {name}</div>\n              <div className=\"gca-popup_cont_username\">@{login}</div>\n            </div>\n            <div className=\"gca-popup_info_wrap\">\n              <div className=\"gca-popup_info_created\">\n                Created At {created_at}\n              </div>\n              <div className=\"gca-popup_info\">\n                <div className=\"gca-popup_info_item\">\n                <div className=\"gca-popup_info_count\">{public_repos}</div>\n                <div className=\"gca-popup_info_head\"><a href={html_url + '?tab=repositories'} target=\"_blank\">Repo</a></div>\n                </div>\n                <div className=\"gca-popup_info_item gca-popup_info_item_c\">\n                <div className=\"gca-popup_info_count\">{followers}</div>\n                  <div className=\"gca-popup_info_head\"><a href={html_url + '/followers'} target=\"_blank\">Followers</a></div>\n                </div>\n                <div className=\"gca-popup_info_item\">\n                <div className=\"gca-popup_info_count\">{following}</div>\n                <div className=\"gca-popup_info_head\"><a href={html_url + '/following'}  target=\"_blank\">Following</a></div>\n                </div>\n              </div>\n            </div>\n            </div>\n          </div>\n          <span className=\"gca-popup_close\" onClick={() => this.props.handlePopup(false)}>X</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CardPopup;\n","import React, { Component } from 'react'\nimport './Dropdown.scss'\n class Dropdown extends Component {\n    constructor(){\n        super();\n        this.state = {\n            openListItem: false,\n            showDropdown: false\n        }\n    }\n    handleDropDown = ()=>{\n        this.setState({showDropdown: !this.state.showDropdown})\n    }\n    getCurrentSort=()=>{\n       let p = this.props.sortItems.listItems.find(a=> a.id === this.props.sortItems.currentSortId);\n        return p.name\n    }\n    handleSort=(id)=>{\n        if(id!==this.props.sortItems.currentSortId){\n            this.props.sortHandler(id);\n        }\n        this.handleDropDown();\n    }\n    render() {\n        return (\n            <div className='gca-dropdown_wrapper gca-card_list_items'>\n                <div className=\"gca-dropdown_head\" onClick={()=> this.handleDropDown()}>{this.getCurrentSort()}</div>\n                {this.state.showDropdown ? <div className='gca-dropdown_list'>\n                    {this.props.sortItems.listItems.map(l => {\n                       return <div className='gca-dropdown_listItems' onClick={()=>this.handleSort(l.id)} key={l.id}>{l.name}</div>\n                    })}\n                </div> : ''}\n            </div>\n        )\n    }\n}\n\nexport default Dropdown\n","import React, { Component } from \"react\";\nimport Card from \"../Card/Card\";\nimport CardPopup from \"../CardPopup/CardPopup\";\nimport DropDown from \"../../Common/Dropdown/Dropdown\";\nimport \"./CardList.scss\";\n\nclass CardList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUserName: this.props.userList,\n      userDetails: [],\n      currentUser: {},\n      showPopup: false,\n    };\n  }\n\n\n  static getDerivedStateFromProps(nextProps, prevState){\n    if(nextProps.userList!==prevState.currentUserName){\n      return { currentUserName: nextProps.userList};\n   }\n   else return null;\n }\n \n\n  fetchUserDetails = async (userName) => {\n    let userDetail = this.getCurrentUserDetails(userName);\n    if (!userDetail) {\n      let response = await fetch(` https://api.github.com/users/${userName}`);\n      let data = await response.json();\n      this.setState((prevState) => ({\n        userDetails: [...prevState.userDetails, data],\n        currentUser: { ...data },\n      }));\n    } else this.setState({ currentUser: userDetail });\n  };\n\n  getCurrentUserDetails(userName) {\n    let user = this.state.userDetails.find((u) => u.login === userName);\n    return user;\n  }\n\n  handleUserDetail = async (userName, val) => {\n    await this.fetchUserDetails(userName);\n    this.handlePopup(val);\n    return;\n  };\n\n  handlePopup = (val) => {\n    this.setState({ showPopup: val });\n  };\n\n\n  render() {\n    return (\n      <div>\n        {this.state.currentUserName.userList && this.state.currentUserName.userList.length ? (\n          <div className=\"gca-card_list_wrapper\">\n            <div className=\"gca-card_list_drop_card_wrap\">\n            <div className=\"gca-card_list_wrapper_details\">\n            <div className='gca-card_list_wrapper_result gca-card_list_items'>Search Results({this.state.currentUserName.userList.length}+)</div>\n            <div className=\"gca-card_list_wrapper_username gca-card_list_items\">Username Searched - {this.state.currentUserName.name}</div>\n              <DropDown\n                sortItems={this.props.sortItems}\n                sortHandler={(id) => this.props.sortHandler(id)}\n              />\n              </div>\n            <div className=\"gca-card_list\">\n              {this.state.currentUserName.userList.map((user) => (\n                <Card\n                  user={user}\n                  key={user.id}\n                  handleUserDetail={(userName, val) =>\n                    this.handleUserDetail(userName, val)\n                  }\n                />\n              ))}\n            </div>\n            </div>\n            {this.state.showPopup ? (\n              <CardPopup\n                currentUser={this.state.currentUser}\n                handlePopup={(val) => this.handlePopup(val)}\n              />\n            ) : (\n              <div></div>\n            )}\n          </div>\n        ) : (\n          \"\"\n        )}\n      </div>\n    );\n  }\n}\n\nexport default CardList;\n","import React, { Component } from 'react'\nimport  './Loader.scss';\nclass Loader extends Component {\n    render() {\n        return (\n            <div className=\"gca-loader\">\n                <img src=\"/images/2.svg\" alt='img'/>\n            </div>\n        )\n    }\n}\n\nexport default Loader\n","import React from 'react'\n\nfunction Empty() {\n    return (\n        <div>\n            <div>Sorry No Result Found!</div>\n            <div>Please try different Username</div>\n        </div>\n    )\n}\n\nexport default Empty\n","import React, { Component } from \"react\";\nimport SearchBox from \"./Components/SearchBox/SearchBox\";\nimport CardList from \"./Components/CardLists/CardList/CardList\";\nimport Loader from \"./Components/Common/Loader/Loader\";\nimport Empty from \"./Components/Empty/Empty\";\n\nclass Main extends Component {\n  constructor() {\n    super();\n    this.state = {\n      userList: {},\n      currentUserName: [],\n      showLoader: false,\n      showEmpty: false,\n      sortItems: {\n        title: \"Sort By\",\n        currentSortId: 0,\n        listItems: [\n          {\n            name: \"Relevance\",\n            id: 0,\n          },\n          {\n            name: \"High to Low Score\",\n            id: 1,\n          },\n          {\n            name: \"Low to High Score\",\n            id: 2,\n          },\n        ],\n      },\n    };\n  }\n\n  fetchAllUsers = async (userName) => {\n    try {\n      this.setState({ showLoader: true, showEmpty: false });\n      let response = await fetch(\n        `https://api.github.com/search/users?q=${userName}`\n      );\n      let data = await response.json();\n      let showEmpty = false;\n      if (!data.items.length) {\n        showEmpty = true;\n        this.setState(() => ({\n          showLoader: false,\n          showEmpty: showEmpty,\n        }));\n        return;\n      } else {\n        this.setState((prevState) => ({\n          userList: { [userName]: data.items, ...prevState.userList },\n          showLoader: false,\n          showEmpty: showEmpty,\n        }));\n      }\n    } catch {\n      this.setState(() => ({\n        showLoader: false,\n        showEmpty: false,\n      }));\n    }\n  };\n\n  setCurrentUserList = async (userName) => {\n    let userList = this.state.userList[userName];\n    if (!userList) {\n      await this.fetchAllUsers(userName);\n      userList = this.state.userList[userName];\n      this.setState({\n        currentUserName: {\n          name: userName,\n          userList,\n        },\n      });\n      return;\n    } else {\n      this.setState({\n        currentUserName: {\n          name: userName,\n          userList,\n        },\n        showEmpty: false,\n      });\n    }\n  };\n\n  sortHandler = (id = 0) => {\n    let currentUser =  JSON.parse(JSON.stringify(this.state.currentUserName));\n    switch (id) {\n      case 1:\n        currentUser.userList.sort((a, b) => b.id - a.id);\n        this.setState((prevState) => ({\n          currentUserName: currentUser,\n          sortItems: { ...prevState.sortItems, currentSortId: id },\n        }));\n        break;\n      case 2:\n        currentUser.userList.sort((a, b) => a.id - b.id);\n        this.setState((prevState) => ({\n          currentUserName: currentUser,\n          sortItems: { ...prevState.sortItems, currentSortId: id },\n        }));\n        break;\n      default:\n        this.setState((prevState) => ({\n          currentUserName: {\n            name: currentUser.name,\n            userList: [ ...this.state.userList[currentUser.name] ],\n          },\n          sortItems: { ...prevState.sortItems, currentSortId: id },\n        }));\n        break;\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <SearchBox setCurrentUserList={this.setCurrentUserList} />\n\n        {this.state.showLoader ? <Loader /> : \"\"}\n        {this.state.currentUserName &&\n        !this.state.showLoader &&\n        this.state.currentUserName.userList &&\n        this.state.currentUserName.userList.length > 0 ? (\n          <CardList\n            userList={this.state.currentUserName}\n            sortHandler={this.sortHandler}\n            sortItems={this.state.sortItems}\n          />\n        ) : (\n          \"\"\n        )}\n        {this.state.showEmpty ? <Empty /> : \"\"}\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React from 'react';\nimport './App.css';\nimport Main from './Main'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}